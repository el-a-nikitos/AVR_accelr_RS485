
pcf8583+hd44780.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000006aa  0000073e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800064  00800064  00000742  2**0
                  ALLOC
  3 .stab         000008d0  00000000  00000000  00000744  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000183  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001197  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a0  00000000  00000000  000011c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000012b5  00000000  00000000  00001266  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000026b  00000000  00000000  0000251b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000525  00000000  00000000  00002786  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000014c  00000000  00000000  00002cac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00002df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000003b8  00000000  00000000  000030ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000090  00000000  00000000  00003472  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9b 02 	call	0x536	; 0x536 <main>
  8a:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <hd44780_ready>:
	#if HD44780_CONFIG_BIT==0
		uint8_t r = 0;
	#endif

	// Выставляем все биты дата порта в 0
	HD44780_SET_DATA_PORTS_NULL;
  92:	8b b3       	in	r24, 0x1b	; 27
  94:	1b ba       	out	0x1b, r1	; 27

	// Говорим что все DATA работают на прием
	HD44780_SET_DATA_PORTS_READ;
  96:	8a b3       	in	r24, 0x1a	; 26
  98:	1a ba       	out	0x1a, r1	; 26

	// Включает RE и E флаги
	HD44780_SET_CONTROL_PORTS(0, 1, 1);
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	8f 71       	andi	r24, 0x1F	; 31
  9e:	80 6c       	ori	r24, 0xC0	; 192
  a0:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	8a e1       	ldi	r24, 0x1A	; 26
  a4:	8a 95       	dec	r24
  a6:	f1 f7       	brne	.-4      	; 0xa4 <hd44780_ready+0x12>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <hd44780_ready+0x18>
	// Пауза
	#if HD44780_CONFIG_PAUSE_CMD_E>0
		_delay_us(HD44780_CONFIG_PAUSE_CMD_E);
	#endif
	
	d = HD44780_DATA_PIN_NAME;
  aa:	89 b3       	in	r24, 0x19	; 25

	// Выключает RE и E флаги
	HD44780_SET_CONTROL_PORTS(0, 1, 0);
  ac:	95 b3       	in	r25, 0x15	; 21
  ae:	9f 71       	andi	r25, 0x1F	; 31
  b0:	90 64       	ori	r25, 0x40	; 64
  b2:	95 bb       	out	0x15, r25	; 21
  b4:	e7 e5       	ldi	r30, 0x57	; 87
  b6:	f2 e0       	ldi	r31, 0x02	; 2
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <hd44780_ready+0x26>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <hd44780_ready+0x2c>
  be:	00 00       	nop
	#if HD44780_CONFIG_PAUSE_BUSY>0
		_delay_us(HD44780_CONFIG_PAUSE_BUSY);
	#endif

	// Говорим что все DATA работают на передачу
	HD44780_SET_DATA_PORTS_WRITE;
  c0:	9a b3       	in	r25, 0x1a	; 26
  c2:	9f ef       	ldi	r25, 0xFF	; 255
  c4:	9a bb       	out	0x1a, r25	; 26
			return hd44780_pin_convert_from(d);
		#else
			return d;
		#endif
	#endif
}
  c6:	08 95       	ret

000000c8 <hd44780_send_nibble>:
void hd44780_send_nibble(uint8_t cmd) {
	#if HD44780_CONFIG_BIT==0
		uint8_t r = 0;
	#endif
	// Выставляем в дата порту биты в 0 (только для дата контактов)
	HD44780_SET_DATA_PORTS_NULL;
  c8:	9b b3       	in	r25, 0x1b	; 27
  ca:	1b ba       	out	0x1b, r1	; 27
		HD44780_DATA_PORT_NAME |= r;
	#else
		#if HD44780_CONFIG_PINMODE>0
			cmd = hd44780_pin_convert_to(cmd);
		#endif
		HD44780_DATA_PORT_NAME |= cmd;
  cc:	9b b3       	in	r25, 0x1b	; 27
  ce:	89 2b       	or	r24, r25
  d0:	8b bb       	out	0x1b, r24	; 27
	#endif


	// Включает E флаг
	HD44780_SET_CONTROL_PORTS(0, 0, 1);
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	8f 71       	andi	r24, 0x1F	; 31
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	85 bb       	out	0x15, r24	; 21
  da:	8a e1       	ldi	r24, 0x1A	; 26
  dc:	8a 95       	dec	r24
  de:	f1 f7       	brne	.-4      	; 0xdc <hd44780_send_nibble+0x14>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <hd44780_send_nibble+0x1a>
	#if HD44780_CONFIG_PAUSE_WRITE_INIT>0
		_delay_us(HD44780_CONFIG_PAUSE_WRITE_INIT);
	#endif

	// Выключает E флаг
	HD44780_SET_CONTROL_PORTS(0, 0, 0);
  e2:	85 b3       	in	r24, 0x15	; 21
  e4:	8f 71       	andi	r24, 0x1F	; 31
  e6:	85 bb       	out	0x15, r24	; 21
  e8:	87 e5       	ldi	r24, 0x57	; 87
  ea:	92 e0       	ldi	r25, 0x02	; 2
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <hd44780_send_nibble+0x24>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <hd44780_send_nibble+0x2a>
  f2:	00 00       	nop
  f4:	08 95       	ret

000000f6 <hd44780_send_command>:
	// Ожидаем пока LCD освободится и начнет принимать команды
	if(pause>0) { while (hd44780_ready() & HD44780_FLAG_BUSY ) {} }

#else

void hd44780_send_command(uint8_t cmd, uint8_t rs) {
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	d8 2f       	mov	r29, r24
  fc:	c6 2f       	mov	r28, r22
	#if HD44780_CONFIG_BIT==0
		uint8_t r = 0;
	#endif
	// Ожидаем пока LCD освободится и начнет принимать команды
	while (hd44780_ready() & HD44780_FLAG_BUSY) {}
  fe:	0e 94 49 00 	call	0x92	; 0x92 <hd44780_ready>
 102:	88 23       	and	r24, r24
 104:	e4 f3       	brlt	.-8      	; 0xfe <hd44780_send_command+0x8>
#endif

//	_delay_ms(100);

	// Выставляем в дата порту биты в 0 (только для дата контактов)
	HD44780_SET_DATA_PORTS_NULL;
 106:	8b b3       	in	r24, 0x1b	; 27
 108:	1b ba       	out	0x1b, r1	; 27
		HD44780_DATA_PORT_NAME |= r;
	#else
		#if HD44780_CONFIG_PINMODE>0
			cmd = hd44780_pin_convert_to(cmd);
		#endif
		HD44780_DATA_PORT_NAME |= cmd;
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	d8 2b       	or	r29, r24
 10e:	db bb       	out	0x1b, r29	; 27
	#endif

	// Включает E флаг
	HD44780_SET_CONTROL_PORTS(rs, 0, 1);
 110:	25 b3       	in	r18, 0x15	; 21
 112:	80 e2       	ldi	r24, 0x20	; 32
 114:	c8 9f       	mul	r28, r24
 116:	b0 01       	movw	r22, r0
 118:	11 24       	eor	r1, r1
 11a:	cb 01       	movw	r24, r22
 11c:	80 68       	ori	r24, 0x80	; 128
 11e:	9f 6f       	ori	r25, 0xFF	; 255
 120:	92 2f       	mov	r25, r18
 122:	9f 71       	andi	r25, 0x1F	; 31
 124:	89 2b       	or	r24, r25
 126:	85 bb       	out	0x15, r24	; 21
 128:	9a e1       	ldi	r25, 0x1A	; 26
 12a:	9a 95       	dec	r25
 12c:	f1 f7       	brne	.-4      	; 0x12a <hd44780_send_command+0x34>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <hd44780_send_command+0x3a>
	#if HD44780_CONFIG_PAUSE_CMD_E>0
		_delay_us(HD44780_CONFIG_PAUSE_CMD_E);
	#endif

	// Выключает E флаг
	HD44780_SET_CONTROL_PORTS(rs, 0, 0);
 130:	85 b3       	in	r24, 0x15	; 21
 132:	8f 71       	andi	r24, 0x1F	; 31
 134:	68 2b       	or	r22, r24
 136:	65 bb       	out	0x15, r22	; 21
 138:	87 e5       	ldi	r24, 0x57	; 87
 13a:	92 e0       	ldi	r25, 0x02	; 2
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <hd44780_send_command+0x46>
 140:	00 c0       	rjmp	.+0      	; 0x142 <hd44780_send_command+0x4c>
 142:	00 00       	nop

	#if HD44780_CONFIG_PAUSE_AFTER_CMD >0
		_delay_us(HD44780_CONFIG_PAUSE_AFTER_CMD);
	#endif

}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <hd44780_init>:
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	89 ef       	ldi	r24, 0xF9	; 249
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	21 50       	subi	r18, 0x01	; 1
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <hd44780_init+0x6>
 158:	00 c0       	rjmp	.+0      	; 0x15a <hd44780_init+0x10>
 15a:	00 00       	nop
	#if HD44780_CONFIG_PAUSE_START>0
		_delay_us(HD44780_CONFIG_PAUSE_START);
	#endif

	// Выставляем в контрольных портах все биты в 0
	HD44780_SET_CONTROL_PORTS(0, 0, 0);
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	8f 71       	andi	r24, 0x1F	; 31
 160:	85 bb       	out	0x15, r24	; 21

	// Включаем контрольные порты на запись в HD44780
	HD44780_SET_CONTROL_DDRS(1, 1, 1);
 162:	84 b3       	in	r24, 0x14	; 20
 164:	80 6e       	ori	r24, 0xE0	; 224
 166:	84 bb       	out	0x14, r24	; 20

	// Во все дата порты записываем 0 (на всякий пожарный чтобы ничего не случилось)
	HD44780_SET_DATA_PORTS_NULL;
 168:	8b b3       	in	r24, 0x1b	; 27
 16a:	1b ba       	out	0x1b, r1	; 27

	// Включаем дата порты на запись в HD44780
	HD44780_SET_DATA_PORTS_WRITE;
 16c:	8a b3       	in	r24, 0x1a	; 26
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	8a bb       	out	0x1a, r24	; 26
 172:	8f ec       	ldi	r24, 0xCF	; 207
 174:	97 e0       	ldi	r25, 0x07	; 7
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <hd44780_init+0x2c>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <hd44780_init+0x32>
 17c:	00 00       	nop
		#if HD44780_CONFIG_PAUSE_AFTER_CMD >0
			_delay_us(HD44780_CONFIG_PAUSE_AFTER_CMD);
		#endif

	#else
		HD44780_SEND_FUNCTION(HD44780_CONFIG_BIT, HD44780_CONFIG_LINES, HD44780_CONFIG_FONT_SIZE);
 17e:	88 e3       	ldi	r24, 0x38	; 56
 180:	0e 94 64 00 	call	0xc8	; 0xc8 <hd44780_send_nibble>
 184:	87 e0       	ldi	r24, 0x07	; 7
 186:	90 e2       	ldi	r25, 0x20	; 32
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <hd44780_init+0x3e>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <hd44780_init+0x44>
 18e:	00 00       	nop
		#if HD44780_CONFIG_PAUSE_INIT_STEPONE>0
			_delay_us(HD44780_CONFIG_PAUSE_INIT_STEPONE);
		#endif

		// Еще раз посылаем инициализацию
		HD44780_SEND_FUNCTION(HD44780_CONFIG_BIT, HD44780_CONFIG_LINES, HD44780_CONFIG_FONT_SIZE);
 190:	88 e3       	ldi	r24, 0x38	; 56
 192:	0e 94 64 00 	call	0xc8	; 0xc8 <hd44780_send_nibble>
 196:	87 ec       	ldi	r24, 0xC7	; 199
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <hd44780_init+0x50>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <hd44780_init+0x56>
 1a0:	00 00       	nop
		#if HD44780_CONFIG_PAUSE_INIT_STEPTWO>0
			_delay_us(HD44780_CONFIG_PAUSE_INIT_STEPTWO);
		#endif

		// Еще раз посылаем инициализацию
		HD44780_SEND_FUNCTION(HD44780_CONFIG_BIT, HD44780_CONFIG_LINES, HD44780_CONFIG_FONT_SIZE);
 1a2:	88 e3       	ldi	r24, 0x38	; 56
 1a4:	0e 94 64 00 	call	0xc8	; 0xc8 <hd44780_send_nibble>
 1a8:	87 ec       	ldi	r24, 0xC7	; 199
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <hd44780_init+0x62>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <hd44780_init+0x68>
 1b2:	00 00       	nop
		#if HD44780_CONFIG_PAUSE_INIT_STEPTHREE>0
			_delay_us(HD44780_CONFIG_PAUSE_INIT_STEPTHREE);
		#endif

		// Еще раз посылаем инициализацию
		HD44780_SEND_FUNCTION(HD44780_CONFIG_BIT, HD44780_CONFIG_LINES, HD44780_CONFIG_FONT_SIZE);
 1b4:	88 e3       	ldi	r24, 0x38	; 56
 1b6:	0e 94 64 00 	call	0xc8	; 0xc8 <hd44780_send_nibble>

	#endif
	
	// Отправлем команду которая устанавливает курсор в начало. (Должна идти первой)
	HD44780_SEND_CMD_HOME;
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	0e 94 7b 00 	call	0xf6	; 0xf6 <hd44780_send_command>

	// Включаем экран и устанавливаем параметры курсора
	HD44780_SEND_LCD_CTRL(1, HD44780_CONFIG_CURSOR_ON, HD44780_CONFIG_CURSOR_BLINK);
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	8c e0       	ldi	r24, 0x0C	; 12
 1c6:	0e 94 7b 00 	call	0xf6	; 0xf6 <hd44780_send_command>

	// Очищаем экран
	HD44780_SEND_CMD_CLEAR;
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 7b 00 	call	0xf6	; 0xf6 <hd44780_send_command>

	// Входим в режим работы и устанавливем направление курсора и сдвиг экрана.
	HD44780_SEND_ENTRY_MODE(HD44780_CONFIG_CURSOR_DIRECTION, HD44780_CONFIG_CURSOR_LCD_SHIFT);
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	86 e0       	ldi	r24, 0x06	; 6
 1d6:	0e 94 7b 00 	call	0xf6	; 0xf6 <hd44780_send_command>
 1da:	08 95       	ret

000001dc <i2c_stop_cond>:

//===============================================================
//                   Генерация условия стоп
//===============================================================
void i2c_stop_cond (void)	{
	I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
 1dc:	a0 9a       	sbi	0x14, 0	; 20
 1de:	8a e1       	ldi	r24, 0x1A	; 26
 1e0:	8a 95       	dec	r24
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <i2c_stop_cond+0x4>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <i2c_stop_cond+0xa>
	I2C_DELAY
	I2C_DDR |= _BV(SDA); // притянуть SDA (лог.0)
 1e6:	a1 9a       	sbi	0x14, 1	; 20
 1e8:	8a e1       	ldi	r24, 0x1A	; 26
 1ea:	8a 95       	dec	r24
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <i2c_stop_cond+0xe>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <i2c_stop_cond+0x14>
	I2C_DELAY
		
	I2C_DDR &= ~_BV(SCL); // отпустить SCL (лог.1)
 1f0:	a0 98       	cbi	0x14, 0	; 20
 1f2:	8a e1       	ldi	r24, 0x1A	; 26
 1f4:	8a 95       	dec	r24
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <i2c_stop_cond+0x18>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <i2c_stop_cond+0x1e>
	I2C_DELAY
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1)
 1fa:	a1 98       	cbi	0x14, 1	; 20
 1fc:	8a e1       	ldi	r24, 0x1A	; 26
 1fe:	8a 95       	dec	r24
 200:	f1 f7       	brne	.-4      	; 0x1fe <i2c_stop_cond+0x22>
 202:	00 c0       	rjmp	.+0      	; 0x204 <i2c_stop_cond+0x28>
 204:	8a e1       	ldi	r24, 0x1A	; 26
 206:	8a 95       	dec	r24
 208:	f1 f7       	brne	.-4      	; 0x206 <i2c_stop_cond+0x2a>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <i2c_stop_cond+0x30>
 20c:	8a e1       	ldi	r24, 0x1A	; 26
 20e:	8a 95       	dec	r24
 210:	f1 f7       	brne	.-4      	; 0x20e <i2c_stop_cond+0x32>
 212:	00 c0       	rjmp	.+0      	; 0x214 <i2c_stop_cond+0x38>
 214:	8a e1       	ldi	r24, 0x1A	; 26
 216:	8a 95       	dec	r24
 218:	f1 f7       	brne	.-4      	; 0x216 <i2c_stop_cond+0x3a>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <i2c_stop_cond+0x40>
 21c:	8a e1       	ldi	r24, 0x1A	; 26
 21e:	8a 95       	dec	r24
 220:	f1 f7       	brne	.-4      	; 0x21e <i2c_stop_cond+0x42>
 222:	00 c0       	rjmp	.+0      	; 0x224 <i2c_stop_cond+0x48>
 224:	08 95       	ret

00000226 <i2c_init>:
//===============================================================
//                    инициализация шины I2C
//===============================================================
void i2c_init (void) {
	////////для I2C/////////
	I2C_DDR &= ~_BV(SDA);		// когда DDR=0, вывод SDA висит в воздухе, когда DDR=1 то SDA притянута к земле (регистром DDR мы и будем манипулировать)
 226:	a1 98       	cbi	0x14, 1	; 20
	I2C_DDR &= ~_BV(SCL);		// когда DDR=0, вывод SCL висит в воздухе, когда DDR=1 то SCL притянута к земле (регистром DDR мы и будем манипулировать)
 228:	a0 98       	cbi	0x14, 0	; 20
	I2C_PORT &= ~_BV(SDA);      // PORT=0 означает, что когда DDR=1 то SDA притянута к земле, когда DDR=0, то SDA висит в воздухе
 22a:	a9 98       	cbi	0x15, 1	; 21
	I2C_PORT &= ~_BV(SCL);      // PORT=0 означает, что когда DDR=1 то SCL притянута к земле, когда DDR=0, то SCL висит в воздухе
 22c:	a8 98       	cbi	0x15, 0	; 21
	i2c_stop_cond();   // стоп шины на случай сбоев
 22e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop_cond>
	i2c_stop_cond();   // стоп шины на случай сбоев
 232:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop_cond>
 236:	08 95       	ret

00000238 <i2c_restart_cond>:

//===============================================================
//      Генерация условия рестарт
//===============================================================
void i2c_restart_cond (void)	{	
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1)
 238:	a1 98       	cbi	0x14, 1	; 20
 23a:	8a e1       	ldi	r24, 0x1A	; 26
 23c:	8a 95       	dec	r24
 23e:	f1 f7       	brne	.-4      	; 0x23c <i2c_restart_cond+0x4>
 240:	00 c0       	rjmp	.+0      	; 0x242 <i2c_restart_cond+0xa>
	I2C_DELAY
	I2C_DDR &= ~_BV(SCL); // отпустить SCL (лог.1)
 242:	a0 98       	cbi	0x14, 0	; 20
 244:	8a e1       	ldi	r24, 0x1A	; 26
 246:	8a 95       	dec	r24
 248:	f1 f7       	brne	.-4      	; 0x246 <i2c_restart_cond+0xe>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <i2c_restart_cond+0x14>
	I2C_DELAY
	
	I2C_DDR |= _BV(SDA); // притянуть SDA (лог.0)
 24c:	a1 9a       	sbi	0x14, 1	; 20
 24e:	8a e1       	ldi	r24, 0x1A	; 26
 250:	8a 95       	dec	r24
 252:	f1 f7       	brne	.-4      	; 0x250 <i2c_restart_cond+0x18>
 254:	00 c0       	rjmp	.+0      	; 0x256 <i2c_restart_cond+0x1e>
	I2C_DELAY
	I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
 256:	a0 9a       	sbi	0x14, 0	; 20
 258:	8a e1       	ldi	r24, 0x1A	; 26
 25a:	8a 95       	dec	r24
 25c:	f1 f7       	brne	.-4      	; 0x25a <i2c_restart_cond+0x22>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <i2c_restart_cond+0x28>
 260:	08 95       	ret

00000262 <i2c_send_byte>:

                   
//===============================================================
//                    Отправка байта по I2С
//===============================================================
unsigned char i2c_send_byte (unsigned char data)	{	
 262:	98 e0       	ldi	r25, 0x08	; 8
 unsigned char i;
 unsigned char ack=1;			//АСК, если АСК=1 – произошла ошибка
	for (i=0;i<8;i++)
	{
		if ((data&0x80)==0x00) I2C_DDR |= _BV(SDA);	// Выставить бит на SDA (лог.0)
 264:	88 23       	and	r24, r24
 266:	14 f0       	brlt	.+4      	; 0x26c <i2c_send_byte+0xa>
 268:	a1 9a       	sbi	0x14, 1	; 20
 26a:	01 c0       	rjmp	.+2      	; 0x26e <i2c_send_byte+0xc>
		else I2C_DDR &= ~_BV(SDA); // лог.1
 26c:	a1 98       	cbi	0x14, 1	; 20
 26e:	2a e1       	ldi	r18, 0x1A	; 26
 270:	2a 95       	dec	r18
 272:	f1 f7       	brne	.-4      	; 0x270 <i2c_send_byte+0xe>
 274:	00 c0       	rjmp	.+0      	; 0x276 <i2c_send_byte+0x14>
		I2C_DELAY
		I2C_DDR &= ~_BV(SCL);	// Записать его импульсом на SCL       // отпустить SCL (лог.1)
 276:	a0 98       	cbi	0x14, 0	; 20
 278:	2a e1       	ldi	r18, 0x1A	; 26
 27a:	2a 95       	dec	r18
 27c:	f1 f7       	brne	.-4      	; 0x27a <i2c_send_byte+0x18>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <i2c_send_byte+0x1e>
		I2C_DELAY
		I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
 280:	a0 9a       	sbi	0x14, 0	; 20
		data=data<<1;
 282:	88 0f       	add	r24, r24
 284:	91 50       	subi	r25, 0x01	; 1
//                    Отправка байта по I2С
//===============================================================
unsigned char i2c_send_byte (unsigned char data)	{	
 unsigned char i;
 unsigned char ack=1;			//АСК, если АСК=1 – произошла ошибка
	for (i=0;i<8;i++)
 286:	71 f7       	brne	.-36     	; 0x264 <i2c_send_byte+0x2>
		I2C_DDR &= ~_BV(SCL);	// Записать его импульсом на SCL       // отпустить SCL (лог.1)
		I2C_DELAY
		I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
		data=data<<1;
	}
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1), чтобы ведомое устройство смогло сгенерировать ACK
 288:	a1 98       	cbi	0x14, 1	; 20
 28a:	8a e1       	ldi	r24, 0x1A	; 26
 28c:	8a 95       	dec	r24
 28e:	f1 f7       	brne	.-4      	; 0x28c <i2c_send_byte+0x2a>
 290:	00 c0       	rjmp	.+0      	; 0x292 <i2c_send_byte+0x30>
	I2C_DELAY
	I2C_DDR &= ~_BV(SCL); // отпустить SCL (лог.1), чтобы ведомое устройство передало ACK
 292:	a0 98       	cbi	0x14, 0	; 20
 294:	2a e1       	ldi	r18, 0x1A	; 26
 296:	2a 95       	dec	r18
 298:	f1 f7       	brne	.-4      	; 0x296 <i2c_send_byte+0x34>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <i2c_send_byte+0x3a>
	I2C_DELAY
	if ((I2C_PIN&_BV(SDA))==_BV(SDA)) ack=1; else ack=0;	// Считать ACK
 29c:	83 b3       	in	r24, 0x13	; 19

	I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)  // приём ACK завершён
 29e:	a0 9a       	sbi	0x14, 0	; 20
	
	return ack; // вернуть ACK (0) или NACK (1)
}
 2a0:	86 95       	lsr	r24
 2a2:	81 70       	andi	r24, 0x01	; 1
 2a4:	08 95       	ret

000002a6 <i2c_get_byte>:


//===============================================================
//                   Считывание байта по I2C
//===============================================================
unsigned char i2c_get_byte (unsigned char last_byte)	{	
 2a6:	28 2f       	mov	r18, r24
 unsigned char i, res=0;
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1)
 2a8:	a1 98       	cbi	0x14, 1	; 20
 2aa:	98 e0       	ldi	r25, 0x08	; 8

//===============================================================
//                   Считывание байта по I2C
//===============================================================
unsigned char i2c_get_byte (unsigned char last_byte)	{	
 unsigned char i, res=0;
 2ac:	80 e0       	ldi	r24, 0x00	; 0
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1)

	for (i=0;i<8;i++)
	{
		res=res<<1;
 2ae:	88 0f       	add	r24, r24
		I2C_DDR &= ~_BV(SCL); // отпустить SCL (лог.1)		//Импульс на SCL
 2b0:	a0 98       	cbi	0x14, 0	; 20
 2b2:	3a e1       	ldi	r19, 0x1A	; 26
 2b4:	3a 95       	dec	r19
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <i2c_get_byte+0xe>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <i2c_get_byte+0x14>
		I2C_DELAY
		if ((I2C_PIN&_BV(SDA))==_BV(SDA)) res=res|0x01; // Чтение SDA в переменную
 2ba:	99 99       	sbic	0x13, 1	; 19
 2bc:	81 60       	ori	r24, 0x01	; 1
		I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
 2be:	a0 9a       	sbi	0x14, 0	; 20
 2c0:	3a e1       	ldi	r19, 0x1A	; 26
 2c2:	3a 95       	dec	r19
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <i2c_get_byte+0x1c>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <i2c_get_byte+0x22>
 2c8:	91 50       	subi	r25, 0x01	; 1
//===============================================================
unsigned char i2c_get_byte (unsigned char last_byte)	{	
 unsigned char i, res=0;
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1)

	for (i=0;i<8;i++)
 2ca:	89 f7       	brne	.-30     	; 0x2ae <i2c_get_byte+0x8>
		if ((I2C_PIN&_BV(SDA))==_BV(SDA)) res=res|0x01; // Чтение SDA в переменную
		I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
		I2C_DELAY
	}

	if (last_byte==0) I2C_DDR |= _BV(SDA); // притянуть SDA (лог.0)		// Подтверждение, ACK, будем считывать ещё один байт
 2cc:	21 11       	cpse	r18, r1
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <i2c_get_byte+0x2e>
 2d0:	a1 9a       	sbi	0x14, 1	; 20
 2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <i2c_get_byte+0x30>
	else I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1)					// Без подтверждения, NACK, это последний считанный байт
 2d4:	a1 98       	cbi	0x14, 1	; 20
 2d6:	9a e1       	ldi	r25, 0x1A	; 26
 2d8:	9a 95       	dec	r25
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <i2c_get_byte+0x32>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <i2c_get_byte+0x38>
	I2C_DELAY
	I2C_DDR &= ~_BV(SCL); // отпустить SCL (лог.1)
 2de:	a0 98       	cbi	0x14, 0	; 20
 2e0:	3a e1       	ldi	r19, 0x1A	; 26
 2e2:	3a 95       	dec	r19
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <i2c_get_byte+0x3c>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <i2c_get_byte+0x42>
	I2C_DELAY
	I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
 2e8:	a0 9a       	sbi	0x14, 0	; 20
 2ea:	9a e1       	ldi	r25, 0x1A	; 26
 2ec:	9a 95       	dec	r25
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <i2c_get_byte+0x46>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <i2c_get_byte+0x4c>
	I2C_DELAY
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1)
 2f2:	a1 98       	cbi	0x14, 1	; 20

	return res; // вернуть считанное значение
}
 2f4:	08 95       	ret

000002f6 <PCF_read_hh_mm_ss>:
	//чтение времени из PCF8583
	//PCF_hour=0;
	//PCF_min=0;
	//PCF_sec=0;
	
	i2c_restart_cond();
 2f6:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_restart_cond>
	i2c_send_byte (WRITE_PCF);  // адрес записи
 2fa:	80 ea       	ldi	r24, 0xA0	; 160
 2fc:	0e 94 31 01 	call	0x262	; 0x262 <i2c_send_byte>
	i2c_send_byte (0x02);		// адрес секунд и десятков секунд (при дальнейшем чтении, адрес инкрементируется автоматически)
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	0e 94 31 01 	call	0x262	; 0x262 <i2c_send_byte>

	i2c_restart_cond();			// повторный старт
 306:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_restart_cond>
	i2c_send_byte(READ_PCF);	// адрес чтения
 30a:	81 ea       	ldi	r24, 0xA1	; 161
 30c:	0e 94 31 01 	call	0x262	; 0x262 <i2c_send_byte>
		
	i=i2c_get_byte(0);												// чтение секунды
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_get_byte>
	PCF_sec=(((i & 0b11110000) >> 4 ) * 10 ) + ((i & 0b00001111));  // перевод из BCD в BIN и передача в переменную "sec"
 316:	98 2f       	mov	r25, r24
 318:	92 95       	swap	r25
 31a:	9f 70       	andi	r25, 0x0F	; 15
 31c:	99 0f       	add	r25, r25
 31e:	29 2f       	mov	r18, r25
 320:	22 0f       	add	r18, r18
 322:	22 0f       	add	r18, r18
 324:	92 0f       	add	r25, r18
 326:	8f 70       	andi	r24, 0x0F	; 15
 328:	98 0f       	add	r25, r24
 32a:	90 93 68 00 	sts	0x0068, r25
	
	i=i2c_get_byte(0);												// чтение минуты
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_get_byte>
	PCF_min=(((i & 0b11110000) >> 4 ) * 10 ) + ((i & 0b00001111));  // перевод из BCD в BIN и передача в переменную "min"
 334:	98 2f       	mov	r25, r24
 336:	92 95       	swap	r25
 338:	9f 70       	andi	r25, 0x0F	; 15
 33a:	99 0f       	add	r25, r25
 33c:	29 2f       	mov	r18, r25
 33e:	22 0f       	add	r18, r18
 340:	22 0f       	add	r18, r18
 342:	92 0f       	add	r25, r18
 344:	8f 70       	andi	r24, 0x0F	; 15
 346:	98 0f       	add	r25, r24
 348:	90 93 69 00 	sts	0x0069, r25
	
	i=i2c_get_byte(0);												// чтение часы
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_get_byte>
	PCF_hour=(((i & 0b11110000) >> 4 ) * 10 ) + ((i & 0b00001111)); // перевод из BCD в BIN и передача в переменную "hour"
 352:	98 2f       	mov	r25, r24
 354:	92 95       	swap	r25
 356:	9f 70       	andi	r25, 0x0F	; 15
 358:	99 0f       	add	r25, r25
 35a:	29 2f       	mov	r18, r25
 35c:	22 0f       	add	r18, r18
 35e:	22 0f       	add	r18, r18
 360:	92 0f       	add	r25, r18
 362:	8f 70       	andi	r24, 0x0F	; 15
 364:	98 0f       	add	r25, r24
 366:	90 93 6a 00 	sts	0x006A, r25
	
	i=i2c_get_byte(0);												// чтение год/день
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_get_byte>
	PCF_day=(((i & 0b00110000) >> 4 ) * 10 ) + ((i & 0b00001111));	// день
 370:	98 2f       	mov	r25, r24
 372:	90 73       	andi	r25, 0x30	; 48
 374:	96 95       	lsr	r25
 376:	96 95       	lsr	r25
 378:	96 95       	lsr	r25
 37a:	29 2f       	mov	r18, r25
 37c:	22 0f       	add	r18, r18
 37e:	22 0f       	add	r18, r18
 380:	92 0f       	add	r25, r18
 382:	28 2f       	mov	r18, r24
 384:	2f 70       	andi	r18, 0x0F	; 15
 386:	92 0f       	add	r25, r18
 388:	90 93 67 00 	sts	0x0067, r25
	PCF_year=(i >> 6);												// год
 38c:	82 95       	swap	r24
 38e:	86 95       	lsr	r24
 390:	86 95       	lsr	r24
 392:	83 70       	andi	r24, 0x03	; 3
 394:	80 93 64 00 	sts	0x0064, r24
	
	i=i2c_get_byte(1);												// чтение неделя/месяц
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_get_byte>
	PCF_month=(((i & 0b00010000) >> 4 ) * 10 ) + ((i & 0b00001111));// месяц
 39e:	84 fb       	bst	r24, 4
 3a0:	99 27       	eor	r25, r25
 3a2:	90 f9       	bld	r25, 0
 3a4:	99 0f       	add	r25, r25
 3a6:	29 2f       	mov	r18, r25
 3a8:	22 0f       	add	r18, r18
 3aa:	22 0f       	add	r18, r18
 3ac:	92 0f       	add	r25, r18
 3ae:	28 2f       	mov	r18, r24
 3b0:	2f 70       	andi	r18, 0x0F	; 15
 3b2:	92 0f       	add	r25, r18
 3b4:	90 93 65 00 	sts	0x0065, r25
	PCF_weekday=(i >> 5);											//день недели
 3b8:	82 95       	swap	r24
 3ba:	86 95       	lsr	r24
 3bc:	87 70       	andi	r24, 0x07	; 7
 3be:	80 93 66 00 	sts	0x0066, r24
	
	i2c_stop_cond();
 3c2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop_cond>
 3c6:	08 95       	ret

000003c8 <PCF_write_hh_mm_ss>:
//======================================================================================================================================================
void PCF_write_hh_mm_ss (void)	{	
	unsigned char i; // временная переменная для перевода в BCD кодировку
 
	// перед записью проверяем корректность входных данных
	if (PCF_hour>23) PCF_hour=0;		// мы не можем использовать ЧЧ больше чем 23
 3c8:	80 91 6a 00 	lds	r24, 0x006A
 3cc:	88 31       	cpi	r24, 0x18	; 24
 3ce:	10 f0       	brcs	.+4      	; 0x3d4 <PCF_write_hh_mm_ss+0xc>
 3d0:	10 92 6a 00 	sts	0x006A, r1
	if (PCF_min>59) PCF_min=0;			// мы не можем использовать ММ больше чем 59
 3d4:	80 91 69 00 	lds	r24, 0x0069
 3d8:	8c 33       	cpi	r24, 0x3C	; 60
 3da:	10 f0       	brcs	.+4      	; 0x3e0 <PCF_write_hh_mm_ss+0x18>
 3dc:	10 92 69 00 	sts	0x0069, r1
	if (PCF_sec>59) PCF_sec=0;			// мы не можем использовать СС больше чем 59
 3e0:	80 91 68 00 	lds	r24, 0x0068
 3e4:	8c 33       	cpi	r24, 0x3C	; 60
 3e6:	10 f0       	brcs	.+4      	; 0x3ec <PCF_write_hh_mm_ss+0x24>
 3e8:	10 92 68 00 	sts	0x0068, r1
	if (PCF_day>31) PCF_day=0;			// мы не можем использовать день больше чем 31
 3ec:	80 91 67 00 	lds	r24, 0x0067
 3f0:	80 32       	cpi	r24, 0x20	; 32
 3f2:	10 f0       	brcs	.+4      	; 0x3f8 <PCF_write_hh_mm_ss+0x30>
 3f4:	10 92 67 00 	sts	0x0067, r1
	if (PCF_weekday>6) PCF_weekday=0;	// день недели только с ПН (0) до ВС (6)
 3f8:	80 91 66 00 	lds	r24, 0x0066
 3fc:	87 30       	cpi	r24, 0x07	; 7
 3fe:	10 f0       	brcs	.+4      	; 0x404 <PCF_write_hh_mm_ss+0x3c>
 400:	10 92 66 00 	sts	0x0066, r1
	if (PCF_month>12) PCF_month=0;		// мы не можем использовать месяц больше чем 12
 404:	80 91 65 00 	lds	r24, 0x0065
 408:	8d 30       	cpi	r24, 0x0D	; 13
 40a:	10 f0       	brcs	.+4      	; 0x410 <PCF_write_hh_mm_ss+0x48>
 40c:	10 92 65 00 	sts	0x0065, r1
	if (PCF_year>3) PCF_year=0;			// год только от 0 (високосный) до 3 (1,2,3 невисокосные)
 410:	80 91 64 00 	lds	r24, 0x0064
 414:	84 30       	cpi	r24, 0x04	; 4
 416:	10 f0       	brcs	.+4      	; 0x41c <PCF_write_hh_mm_ss+0x54>
 418:	10 92 64 00 	sts	0x0064, r1
 
	i2c_restart_cond();
 41c:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_restart_cond>
	i2c_send_byte (WRITE_PCF);	// адрес записи
 420:	80 ea       	ldi	r24, 0xA0	; 160
 422:	0e 94 31 01 	call	0x262	; 0x262 <i2c_send_byte>
	i2c_send_byte (0x02);		// адрес секунд и десятков секунд (при дальнейшей записи, адрес инкрементируется автоматически)
 426:	82 e0       	ldi	r24, 0x02	; 2
 428:	0e 94 31 01 	call	0x262	; 0x262 <i2c_send_byte>
	
	i2c_send_byte (0);			// сброс десятков секунд/секунд в 00
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	0e 94 31 01 	call	0x262	; 0x262 <i2c_send_byte>
	
	// перед записью в микросхему часов, надо перевести время и дату в формат BCD
	div_t res = div (PCF_min, 10) ;	// делим минуты на 10, частное записывается в переменную "res.quot", а остаток в переменную "res.rem"
 432:	80 91 69 00 	lds	r24, 0x0069
 436:	6a e0       	ldi	r22, 0x0A	; 10
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 05 03 	call	0x60a	; 0x60a <__divmodhi4>
	i=(res.quot << 4) | res.rem;	// перевод "min"  из BIN в BCD и передача в PCF8583
 440:	9b 01       	movw	r18, r22
 442:	22 95       	swap	r18
 444:	32 95       	swap	r19
 446:	30 7f       	andi	r19, 0xF0	; 240
 448:	32 27       	eor	r19, r18
 44a:	20 7f       	andi	r18, 0xF0	; 240
 44c:	32 27       	eor	r19, r18
	i2c_send_byte (i);				// запись десятков минут/минут
 44e:	82 2b       	or	r24, r18
 450:	0e 94 31 01 	call	0x262	; 0x262 <i2c_send_byte>
	
	res = div (PCF_hour, 10) ;		// делим час на 10, частное записывается в переменную "res.quot", а остаток в переменную "res.rem"
 454:	80 91 6a 00 	lds	r24, 0x006A
 458:	6a e0       	ldi	r22, 0x0A	; 10
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 05 03 	call	0x60a	; 0x60a <__divmodhi4>
	i=(res.quot << 4) | res.rem;	// перевод "hour" из BIN в BCD и передача в PCF8583
 462:	9b 01       	movw	r18, r22
 464:	22 95       	swap	r18
 466:	32 95       	swap	r19
 468:	30 7f       	andi	r19, 0xF0	; 240
 46a:	32 27       	eor	r19, r18
 46c:	20 7f       	andi	r18, 0xF0	; 240
 46e:	32 27       	eor	r19, r18
	i2c_send_byte (i);				// запись десятков часов/часов
 470:	82 2b       	or	r24, r18
 472:	0e 94 31 01 	call	0x262	; 0x262 <i2c_send_byte>
	
	res = div (PCF_day, 10) ;		// делим день на 10, частное записывается в переменную "res.quot", а остаток в переменную "res.rem"
 476:	80 91 67 00 	lds	r24, 0x0067
 47a:	6a e0       	ldi	r22, 0x0A	; 10
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 05 03 	call	0x60a	; 0x60a <__divmodhi4>
	i=(res.quot << 4) | res.rem;	// день
	i=i | (PCF_year << 6);			// добавляем год
 484:	20 91 64 00 	lds	r18, 0x0064
	res = div (PCF_hour, 10) ;		// делим час на 10, частное записывается в переменную "res.quot", а остаток в переменную "res.rem"
	i=(res.quot << 4) | res.rem;	// перевод "hour" из BIN в BCD и передача в PCF8583
	i2c_send_byte (i);				// запись десятков часов/часов
	
	res = div (PCF_day, 10) ;		// делим день на 10, частное записывается в переменную "res.quot", а остаток в переменную "res.rem"
	i=(res.quot << 4) | res.rem;	// день
 488:	ab 01       	movw	r20, r22
 48a:	42 95       	swap	r20
 48c:	52 95       	swap	r21
 48e:	50 7f       	andi	r21, 0xF0	; 240
 490:	54 27       	eor	r21, r20
 492:	40 7f       	andi	r20, 0xF0	; 240
 494:	54 27       	eor	r21, r20
 496:	84 2b       	or	r24, r20
	i=i | (PCF_year << 6);			// добавляем год
 498:	90 e4       	ldi	r25, 0x40	; 64
 49a:	29 9f       	mul	r18, r25
 49c:	90 01       	movw	r18, r0
 49e:	11 24       	eor	r1, r1
	i2c_send_byte (i);				// запись год/день
 4a0:	82 2b       	or	r24, r18
 4a2:	0e 94 31 01 	call	0x262	; 0x262 <i2c_send_byte>
	
	res = div (PCF_month, 10) ;		// делим месяц на 10, частное записывается в переменную "res.quot", а остаток в переменную "res.rem"
 4a6:	80 91 65 00 	lds	r24, 0x0065
 4aa:	6a e0       	ldi	r22, 0x0A	; 10
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 05 03 	call	0x60a	; 0x60a <__divmodhi4>
	i=(res.quot << 4) | res.rem;	// месяц
	i=i | (PCF_weekday << 5);		// добавляем день недели
 4b4:	20 91 66 00 	lds	r18, 0x0066
	i=(res.quot << 4) | res.rem;	// день
	i=i | (PCF_year << 6);			// добавляем год
	i2c_send_byte (i);				// запись год/день
	
	res = div (PCF_month, 10) ;		// делим месяц на 10, частное записывается в переменную "res.quot", а остаток в переменную "res.rem"
	i=(res.quot << 4) | res.rem;	// месяц
 4b8:	ab 01       	movw	r20, r22
 4ba:	42 95       	swap	r20
 4bc:	52 95       	swap	r21
 4be:	50 7f       	andi	r21, 0xF0	; 240
 4c0:	54 27       	eor	r21, r20
 4c2:	40 7f       	andi	r20, 0xF0	; 240
 4c4:	54 27       	eor	r21, r20
 4c6:	84 2b       	or	r24, r20
	i=i | (PCF_weekday << 5);		// добавляем день недели
 4c8:	90 e2       	ldi	r25, 0x20	; 32
 4ca:	29 9f       	mul	r18, r25
 4cc:	90 01       	movw	r18, r0
 4ce:	11 24       	eor	r1, r1
	i2c_send_byte (i);				// запись день недели/месяц
 4d0:	82 2b       	or	r24, r18
 4d2:	0e 94 31 01 	call	0x262	; 0x262 <i2c_send_byte>

	i2c_stop_cond();
 4d6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop_cond>
 4da:	08 95       	ret

000004dc <lcd_puts>:



// Подпрограмма вывода строки на дисплей
void lcd_puts(const char *s)
{
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
	register char c; // c - отправляемый на дисплей символ
	
	while ( (c = *s++) ) {
 4e0:	ec 01       	movw	r28, r24
 4e2:	89 91       	ld	r24, Y+
 4e4:	88 23       	and	r24, r24
 4e6:	31 f0       	breq	.+12     	; 0x4f4 <lcd_puts+0x18>
		HD44780_SEND_CHAR(c);
 4e8:	61 e0       	ldi	r22, 0x01	; 1
 4ea:	0e 94 7b 00 	call	0xf6	; 0xf6 <hd44780_send_command>
// Подпрограмма вывода строки на дисплей
void lcd_puts(const char *s)
{
	register char c; // c - отправляемый на дисплей символ
	
	while ( (c = *s++) ) {
 4ee:	89 91       	ld	r24, Y+
 4f0:	81 11       	cpse	r24, r1
 4f2:	fa cf       	rjmp	.-12     	; 0x4e8 <lcd_puts+0xc>
		HD44780_SEND_CHAR(c);
	}
}
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	08 95       	ret

000004fa <lcd_putn>:



// Подпрограмма вывода числа на дисплей
void lcd_putn(unsigned int i)
{
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	cd b7       	in	r28, 0x3d	; 61
 500:	de b7       	in	r29, 0x3e	; 62
 502:	64 97       	sbiw	r28, 0x14	; 20
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	f8 94       	cli
 508:	de bf       	out	0x3e, r29	; 62
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	cd bf       	out	0x3d, r28	; 61
	char buf[20]; // объявляем буфер
	utoa(i, buf, 10);// Число в строку превращаем (utoa - беззнаковый перевод, itoa - знаковый перевод)
 50e:	4a e0       	ldi	r20, 0x0A	; 10
 510:	50 e0       	ldi	r21, 0x00	; 0
 512:	be 01       	movw	r22, r28
 514:	6f 5f       	subi	r22, 0xFF	; 255
 516:	7f 4f       	sbci	r23, 0xFF	; 255
 518:	0e 94 2d 03 	call	0x65a	; 0x65a <utoa>
	lcd_puts(buf);// Выводим строчку
 51c:	ce 01       	movw	r24, r28
 51e:	01 96       	adiw	r24, 0x01	; 1
 520:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_puts>
}
 524:	64 96       	adiw	r28, 0x14	; 20
 526:	0f b6       	in	r0, 0x3f	; 63
 528:	f8 94       	cli
 52a:	de bf       	out	0x3e, r29	; 62
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	cd bf       	out	0x3d, r28	; 61
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <main>:


int main(void)		// главная программа
{
	// Инициализация шины I2C
	i2c_init ();
 536:	0e 94 13 01 	call	0x226	; 0x226 <i2c_init>
	// Инициализируем дисплей
	hd44780_init();
 53a:	0e 94 a5 00 	call	0x14a	; 0x14a <hd44780_init>
	
	// Установка времени и даты
	PCF_hour=23;			// 23 часа
 53e:	87 e1       	ldi	r24, 0x17	; 23
 540:	80 93 6a 00 	sts	0x006A, r24
	PCF_min=59;				// 59 минут
 544:	8b e3       	ldi	r24, 0x3B	; 59
 546:	80 93 69 00 	sts	0x0069, r24
	PCF_day=31;				// 31 число
 54a:	8f e1       	ldi	r24, 0x1F	; 31
 54c:	80 93 67 00 	sts	0x0067, r24
	PCF_month=12;			// 12 месяц - декабрь
 550:	8c e0       	ldi	r24, 0x0C	; 12
 552:	80 93 65 00 	sts	0x0065, r24
	PCF_year=0;				// год (0 - не високосный)
 556:	10 92 64 00 	sts	0x0064, r1
	PCF_weekday=6;			// 6 день недели (воскресенье)
 55a:	86 e0       	ldi	r24, 0x06	; 6
 55c:	80 93 66 00 	sts	0x0066, r24
	PCF_write_hh_mm_ss();	// Записываем время и дату в микросхему PCF8583
 560:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <PCF_write_hh_mm_ss>

    while(1)    // Основной цикл
    {
        PCF_read_hh_mm_ss();	// Считываем время и дату с микросхемы PCF8583
 564:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <PCF_read_hh_mm_ss>
		
		HD44780_SEND_CURSOR_POS(0, 0);  // строка 1 (начало)
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	80 e8       	ldi	r24, 0x80	; 128
 56c:	0e 94 7b 00 	call	0xf6	; 0xf6 <hd44780_send_command>
		lcd_putn(PCF_hour);				// выводим часы
 570:	80 91 6a 00 	lds	r24, 0x006A
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_putn>
		HD44780_SEND_CHAR(':');			// разделитель двоеточие
 57a:	61 e0       	ldi	r22, 0x01	; 1
 57c:	8a e3       	ldi	r24, 0x3A	; 58
 57e:	0e 94 7b 00 	call	0xf6	; 0xf6 <hd44780_send_command>
        lcd_putn(PCF_min);				// выводим минуты
 582:	80 91 69 00 	lds	r24, 0x0069
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_putn>
		HD44780_SEND_CHAR(':');			// разделитель двоеточие
 58c:	61 e0       	ldi	r22, 0x01	; 1
 58e:	8a e3       	ldi	r24, 0x3A	; 58
 590:	0e 94 7b 00 	call	0xf6	; 0xf6 <hd44780_send_command>
		lcd_putn(PCF_sec);				// выводим секунды
 594:	80 91 68 00 	lds	r24, 0x0068
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_putn>
		lcd_puts("   ");				// пробелы
 59e:	80 e6       	ldi	r24, 0x60	; 96
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_puts>
		
		HD44780_SEND_CURSOR_POS(1, 0);  // строка 2 (начало)
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	80 ec       	ldi	r24, 0xC0	; 192
 5aa:	0e 94 7b 00 	call	0xf6	; 0xf6 <hd44780_send_command>
		lcd_putn(PCF_day);				// выводим день
 5ae:	80 91 67 00 	lds	r24, 0x0067
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_putn>
		HD44780_SEND_CHAR('.');			// разделитель точка
 5b8:	61 e0       	ldi	r22, 0x01	; 1
 5ba:	8e e2       	ldi	r24, 0x2E	; 46
 5bc:	0e 94 7b 00 	call	0xf6	; 0xf6 <hd44780_send_command>
		lcd_putn(PCF_month);			// выводим месяц
 5c0:	80 91 65 00 	lds	r24, 0x0065
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_putn>
		HD44780_SEND_CHAR('.');			// разделитель точка
 5ca:	61 e0       	ldi	r22, 0x01	; 1
 5cc:	8e e2       	ldi	r24, 0x2E	; 46
 5ce:	0e 94 7b 00 	call	0xf6	; 0xf6 <hd44780_send_command>
		lcd_putn(PCF_year);				// выводим год
 5d2:	80 91 64 00 	lds	r24, 0x0064
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_putn>
		HD44780_SEND_CHAR(' ');			// пробел
 5dc:	61 e0       	ldi	r22, 0x01	; 1
 5de:	80 e2       	ldi	r24, 0x20	; 32
 5e0:	0e 94 7b 00 	call	0xf6	; 0xf6 <hd44780_send_command>
		lcd_putn(PCF_weekday);			// выводим день недели
 5e4:	80 91 66 00 	lds	r24, 0x0066
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_putn>
		lcd_puts("   ");				// пробелы
 5ee:	80 e6       	ldi	r24, 0x60	; 96
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5f6:	2f ef       	ldi	r18, 0xFF	; 255
 5f8:	81 ee       	ldi	r24, 0xE1	; 225
 5fa:	94 e0       	ldi	r25, 0x04	; 4
 5fc:	21 50       	subi	r18, 0x01	; 1
 5fe:	80 40       	sbci	r24, 0x00	; 0
 600:	90 40       	sbci	r25, 0x00	; 0
 602:	e1 f7       	brne	.-8      	; 0x5fc <main+0xc6>
 604:	00 c0       	rjmp	.+0      	; 0x606 <main+0xd0>
 606:	00 00       	nop
 608:	ad cf       	rjmp	.-166    	; 0x564 <main+0x2e>

0000060a <__divmodhi4>:
 60a:	97 fb       	bst	r25, 7
 60c:	07 2e       	mov	r0, r23
 60e:	16 f4       	brtc	.+4      	; 0x614 <__divmodhi4+0xa>
 610:	00 94       	com	r0
 612:	07 d0       	rcall	.+14     	; 0x622 <__divmodhi4_neg1>
 614:	77 fd       	sbrc	r23, 7
 616:	09 d0       	rcall	.+18     	; 0x62a <__divmodhi4_neg2>
 618:	0e 94 19 03 	call	0x632	; 0x632 <__udivmodhi4>
 61c:	07 fc       	sbrc	r0, 7
 61e:	05 d0       	rcall	.+10     	; 0x62a <__divmodhi4_neg2>
 620:	3e f4       	brtc	.+14     	; 0x630 <__divmodhi4_exit>

00000622 <__divmodhi4_neg1>:
 622:	90 95       	com	r25
 624:	81 95       	neg	r24
 626:	9f 4f       	sbci	r25, 0xFF	; 255
 628:	08 95       	ret

0000062a <__divmodhi4_neg2>:
 62a:	70 95       	com	r23
 62c:	61 95       	neg	r22
 62e:	7f 4f       	sbci	r23, 0xFF	; 255

00000630 <__divmodhi4_exit>:
 630:	08 95       	ret

00000632 <__udivmodhi4>:
 632:	aa 1b       	sub	r26, r26
 634:	bb 1b       	sub	r27, r27
 636:	51 e1       	ldi	r21, 0x11	; 17
 638:	07 c0       	rjmp	.+14     	; 0x648 <__udivmodhi4_ep>

0000063a <__udivmodhi4_loop>:
 63a:	aa 1f       	adc	r26, r26
 63c:	bb 1f       	adc	r27, r27
 63e:	a6 17       	cp	r26, r22
 640:	b7 07       	cpc	r27, r23
 642:	10 f0       	brcs	.+4      	; 0x648 <__udivmodhi4_ep>
 644:	a6 1b       	sub	r26, r22
 646:	b7 0b       	sbc	r27, r23

00000648 <__udivmodhi4_ep>:
 648:	88 1f       	adc	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	5a 95       	dec	r21
 64e:	a9 f7       	brne	.-22     	; 0x63a <__udivmodhi4_loop>
 650:	80 95       	com	r24
 652:	90 95       	com	r25
 654:	bc 01       	movw	r22, r24
 656:	cd 01       	movw	r24, r26
 658:	08 95       	ret

0000065a <utoa>:
 65a:	fb 01       	movw	r30, r22
 65c:	9f 01       	movw	r18, r30
 65e:	42 30       	cpi	r20, 0x02	; 2
 660:	74 f0       	brlt	.+28     	; 0x67e <utoa+0x24>
 662:	45 32       	cpi	r20, 0x25	; 37
 664:	64 f4       	brge	.+24     	; 0x67e <utoa+0x24>
 666:	64 2f       	mov	r22, r20
 668:	77 27       	eor	r23, r23
 66a:	0e 94 19 03 	call	0x632	; 0x632 <__udivmodhi4>
 66e:	80 5d       	subi	r24, 0xD0	; 208
 670:	8a 33       	cpi	r24, 0x3A	; 58
 672:	0c f0       	brlt	.+2      	; 0x676 <utoa+0x1c>
 674:	89 5d       	subi	r24, 0xD9	; 217
 676:	81 93       	st	Z+, r24
 678:	cb 01       	movw	r24, r22
 67a:	00 97       	sbiw	r24, 0x00	; 0
 67c:	a1 f7       	brne	.-24     	; 0x666 <utoa+0xc>
 67e:	10 82       	st	Z, r1
 680:	c9 01       	movw	r24, r18
 682:	0c 94 43 03 	jmp	0x686	; 0x686 <strrev>

00000686 <strrev>:
 686:	dc 01       	movw	r26, r24
 688:	fc 01       	movw	r30, r24
 68a:	67 2f       	mov	r22, r23
 68c:	71 91       	ld	r23, Z+
 68e:	77 23       	and	r23, r23
 690:	e1 f7       	brne	.-8      	; 0x68a <strrev+0x4>
 692:	32 97       	sbiw	r30, 0x02	; 2
 694:	04 c0       	rjmp	.+8      	; 0x69e <strrev+0x18>
 696:	7c 91       	ld	r23, X
 698:	6d 93       	st	X+, r22
 69a:	70 83       	st	Z, r23
 69c:	62 91       	ld	r22, -Z
 69e:	ae 17       	cp	r26, r30
 6a0:	bf 07       	cpc	r27, r31
 6a2:	c8 f3       	brcs	.-14     	; 0x696 <strrev+0x10>
 6a4:	08 95       	ret

000006a6 <_exit>:
 6a6:	f8 94       	cli

000006a8 <__stop_program>:
 6a8:	ff cf       	rjmp	.-2      	; 0x6a8 <__stop_program>
