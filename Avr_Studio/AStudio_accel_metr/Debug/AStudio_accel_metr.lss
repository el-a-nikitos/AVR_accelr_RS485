
AStudio_accel_metr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001c2  00000236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f74  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061c  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000071e  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00001fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000456  00000000  00000000  000020e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008b7  00000000  00000000  0000253e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002df5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 ec       	ldi	r30, 0xC2	; 194
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 36       	cpi	r26, 0x62	; 98
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	7a d0       	rcall	.+244    	; 0x14e <main>
  5a:	b1 c0       	rjmp	.+354    	; 0x1be <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <digitalWrite_portB>:
	I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
	I2C_DELAY
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1)

	return res; // вернуть считанное значение
}
  5e:	96 2f       	mov	r25, r22
  60:	68 b3       	in	r22, 0x18	; 24
  62:	21 e0       	ldi	r18, 0x01	; 1
  64:	30 e0       	ldi	r19, 0x00	; 0
  66:	08 2e       	mov	r0, r24
  68:	02 c0       	rjmp	.+4      	; 0x6e <digitalWrite_portB+0x10>
  6a:	22 0f       	add	r18, r18
  6c:	33 1f       	adc	r19, r19
  6e:	0a 94       	dec	r0
  70:	e2 f7       	brpl	.-8      	; 0x6a <digitalWrite_portB+0xc>
  72:	20 95       	com	r18
  74:	26 23       	and	r18, r22
  76:	69 2f       	mov	r22, r25
  78:	70 e0       	ldi	r23, 0x00	; 0
  7a:	02 c0       	rjmp	.+4      	; 0x80 <digitalWrite_portB+0x22>
  7c:	66 0f       	add	r22, r22
  7e:	77 1f       	adc	r23, r23
  80:	8a 95       	dec	r24
  82:	e2 f7       	brpl	.-8      	; 0x7c <digitalWrite_portB+0x1e>
  84:	62 2b       	or	r22, r18
  86:	68 bb       	out	0x18, r22	; 24
  88:	08 95       	ret

0000008a <pinMode_portB>:
  8a:	96 2f       	mov	r25, r22
  8c:	67 b3       	in	r22, 0x17	; 23
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	08 2e       	mov	r0, r24
  94:	02 c0       	rjmp	.+4      	; 0x9a <pinMode_portB+0x10>
  96:	22 0f       	add	r18, r18
  98:	33 1f       	adc	r19, r19
  9a:	0a 94       	dec	r0
  9c:	e2 f7       	brpl	.-8      	; 0x96 <pinMode_portB+0xc>
  9e:	20 95       	com	r18
  a0:	26 23       	and	r18, r22
  a2:	69 2f       	mov	r22, r25
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	02 c0       	rjmp	.+4      	; 0xac <pinMode_portB+0x22>
  a8:	66 0f       	add	r22, r22
  aa:	77 1f       	adc	r23, r23
  ac:	8a 95       	dec	r24
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <pinMode_portB+0x1e>
  b0:	62 2b       	or	r22, r18
  b2:	67 bb       	out	0x17, r22	; 23
  b4:	08 95       	ret

000000b6 <delay_counters>:
  b6:	ab 01       	movw	r20, r22
  b8:	bc 01       	movw	r22, r24
  ba:	41 15       	cp	r20, r1
  bc:	51 05       	cpc	r21, r1
  be:	61 05       	cpc	r22, r1
  c0:	71 05       	cpc	r23, r1
  c2:	61 f0       	breq	.+24     	; 0xdc <delay_counters+0x26>
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	dc 01       	movw	r26, r24
  ca:	00 00       	nop
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	a1 1d       	adc	r26, r1
  d0:	b1 1d       	adc	r27, r1
  d2:	48 17       	cp	r20, r24
  d4:	59 07       	cpc	r21, r25
  d6:	6a 07       	cpc	r22, r26
  d8:	7b 07       	cpc	r23, r27
  da:	b9 f7       	brne	.-18     	; 0xca <delay_counters+0x14>
  dc:	08 95       	ret

000000de <UART_open>:
  de:	10 bc       	out	0x20, r1	; 32
  e0:	89 b9       	out	0x09, r24	; 9
  e2:	88 e1       	ldi	r24, 0x18	; 24
  e4:	8a b9       	out	0x0a, r24	; 10
  e6:	8e e8       	ldi	r24, 0x8E	; 142
  e8:	80 bd       	out	0x20, r24	; 32
  ea:	08 95       	ret

000000ec <UART_write>:
  ec:	5d 9b       	sbis	0x0b, 5	; 11
  ee:	fe cf       	rjmp	.-4      	; 0xec <UART_write>
  f0:	8c b9       	out	0x0c, r24	; 12
  f2:	08 95       	ret

000000f4 <TWI_start_write_stop>:
  f4:	16 be       	out	0x36, r1	; 54
  f6:	94 ea       	ldi	r25, 0xA4	; 164
  f8:	96 bf       	out	0x36, r25	; 54
  fa:	06 b6       	in	r0, 0x36	; 54
  fc:	07 fe       	sbrs	r0, 7
  fe:	fd cf       	rjmp	.-6      	; 0xfa <TWI_start_write_stop+0x6>
 100:	88 0f       	add	r24, r24
 102:	83 b9       	out	0x03, r24	; 3
 104:	84 e8       	ldi	r24, 0x84	; 132
 106:	86 bf       	out	0x36, r24	; 54
 108:	06 b6       	in	r0, 0x36	; 54
 10a:	07 fe       	sbrs	r0, 7
 10c:	fd cf       	rjmp	.-6      	; 0x108 <TWI_start_write_stop+0x14>
 10e:	63 b9       	out	0x03, r22	; 3
 110:	84 e8       	ldi	r24, 0x84	; 132
 112:	86 bf       	out	0x36, r24	; 54
 114:	06 b6       	in	r0, 0x36	; 54
 116:	07 fe       	sbrs	r0, 7
 118:	fd cf       	rjmp	.-6      	; 0x114 <TWI_start_write_stop+0x20>
 11a:	84 e9       	ldi	r24, 0x94	; 148
 11c:	86 bf       	out	0x36, r24	; 54
 11e:	08 95       	ret

00000120 <TWI_start_read_stop>:
 120:	16 be       	out	0x36, r1	; 54
 122:	94 ea       	ldi	r25, 0xA4	; 164
 124:	96 bf       	out	0x36, r25	; 54
 126:	06 b6       	in	r0, 0x36	; 54
 128:	07 fe       	sbrs	r0, 7
 12a:	fd cf       	rjmp	.-6      	; 0x126 <TWI_start_read_stop+0x6>
 12c:	88 0f       	add	r24, r24
 12e:	81 60       	ori	r24, 0x01	; 1
 130:	83 b9       	out	0x03, r24	; 3
 132:	84 e8       	ldi	r24, 0x84	; 132
 134:	86 bf       	out	0x36, r24	; 54
 136:	06 b6       	in	r0, 0x36	; 54
 138:	07 fe       	sbrs	r0, 7
 13a:	fd cf       	rjmp	.-6      	; 0x136 <TWI_start_read_stop+0x16>
 13c:	84 e8       	ldi	r24, 0x84	; 132
 13e:	86 bf       	out	0x36, r24	; 54
 140:	06 b6       	in	r0, 0x36	; 54
 142:	07 fe       	sbrs	r0, 7
 144:	fd cf       	rjmp	.-6      	; 0x140 <TWI_start_read_stop+0x20>
 146:	83 b1       	in	r24, 0x03	; 3
 148:	94 e9       	ldi	r25, 0x94	; 148
 14a:	96 bf       	out	0x36, r25	; 54
 14c:	08 95       	ret

0000014e <main>:
int8_t _i2caddr = 0x19;
int8_t who_I_am = 0xAA;

int main(void)
{
    pinMode_portB(0, OUTPUT);		// PB0 на выход
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	9b df       	rcall	.-202    	; 0x8a <pinMode_portB>
	pinMode_portB(1, OUTPUT);		// PB1 на выход
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	98 df       	rcall	.-208    	; 0x8a <pinMode_portB>
	digitalWrite_portB(1, HIGH);	// PB1 в высокий уровень/ RS485 на выход
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	7f df       	rcall	.-258    	; 0x5e <digitalWrite_portB>
	
	UART_open(103);
 160:	87 e6       	ldi	r24, 0x67	; 103
 162:	bd df       	rcall	.-134    	; 0xde <UART_open>
	
	digitalWrite_portB(0, HIGH);
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	7a df       	rcall	.-268    	; 0x5e <digitalWrite_portB>
 * Author : mini
 */ 
#include <util/twi.h>

void TWI_init_speed(uint8_t prescal)	{
	TWBR = prescal;
 16a:	8f e5       	ldi	r24, 0x5F	; 95
 16c:	80 b9       	out	0x00, r24	; 0
	
	TWI_init_speed(95);	// 18 -> 100kHz; 250 -> 7,9 kHz
	
	UART_write( 0xA0 );
 16e:	80 ea       	ldi	r24, 0xA0	; 160
 170:	bd df       	rcall	.-134    	; 0xec <UART_write>
	UART_write( 0xA1 );
 172:	81 ea       	ldi	r24, 0xA1	; 161
 174:	bb df       	rcall	.-138    	; 0xec <UART_write>
	
	//i2c_programm_init(); 
	
	UART_write( 0xA2 );
 176:	82 ea       	ldi	r24, 0xA2	; 162
 178:	b9 df       	rcall	.-142    	; 0xec <UART_write>
	UART_write( 0xA3 );
 17a:	83 ea       	ldi	r24, 0xA3	; 163
 17c:	b7 df       	rcall	.-146    	; 0xec <UART_write>
 
    while (1) 
    {
		digitalWrite_portB(0, LOW);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	6d df       	rcall	.-294    	; 0x5e <digitalWrite_portB>
		delay_counters(800000);
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	75 e3       	ldi	r23, 0x35	; 53
 188:	8c e0       	ldi	r24, 0x0C	; 12
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	94 df       	rcall	.-216    	; 0xb6 <delay_counters>

		digitalWrite_portB(0, HIGH);
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	65 df       	rcall	.-310    	; 0x5e <digitalWrite_portB>
		delay_counters(50000);
 194:	60 e5       	ldi	r22, 0x50	; 80
 196:	73 ec       	ldi	r23, 0xC3	; 195
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	8c df       	rcall	.-232    	; 0xb6 <delay_counters>
		
		TWI_start_write_stop(_i2caddr, LIS3DH_REG_WHOAMI);
 19e:	6f e0       	ldi	r22, 0x0F	; 15
 1a0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_i2caddr>
 1a4:	a7 df       	rcall	.-178    	; 0xf4 <TWI_start_write_stop>

		delay_counters(200);
 1a6:	68 ec       	ldi	r22, 0xC8	; 200
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	83 df       	rcall	.-250    	; 0xb6 <delay_counters>

		who_I_am = TWI_start_read_stop(_i2caddr);
 1b0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_i2caddr>
 1b4:	b5 df       	rcall	.-150    	; 0x120 <TWI_start_read_stop>
 1b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		
		UART_write( who_I_am );
 1ba:	98 df       	rcall	.-208    	; 0xec <UART_write>
 1bc:	e0 cf       	rjmp	.-64     	; 0x17e <main+0x30>

000001be <_exit>:
 1be:	f8 94       	cli

000001c0 <__stop_program>:
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <__stop_program>
