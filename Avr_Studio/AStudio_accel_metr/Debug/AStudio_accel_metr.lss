
AStudio_accel_metr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b2  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059e  00000000  00000000  00000c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fb  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  000015a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a1  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e6  00000000  00000000  000019fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001be3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e3       	ldi	r30, 0x3A	; 58
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	4d d0       	rcall	.+154    	; 0xe4 <main>
  4a:	75 c0       	rjmp	.+234    	; 0x136 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <digitalWrite_portB>:
	DATA = TWDR;	
	
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
	
	return DATA;
}
  4e:	96 2f       	mov	r25, r22
  50:	68 b3       	in	r22, 0x18	; 24
  52:	21 e0       	ldi	r18, 0x01	; 1
  54:	30 e0       	ldi	r19, 0x00	; 0
  56:	08 2e       	mov	r0, r24
  58:	02 c0       	rjmp	.+4      	; 0x5e <digitalWrite_portB+0x10>
  5a:	22 0f       	add	r18, r18
  5c:	33 1f       	adc	r19, r19
  5e:	0a 94       	dec	r0
  60:	e2 f7       	brpl	.-8      	; 0x5a <digitalWrite_portB+0xc>
  62:	20 95       	com	r18
  64:	26 23       	and	r18, r22
  66:	69 2f       	mov	r22, r25
  68:	70 e0       	ldi	r23, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <digitalWrite_portB+0x22>
  6c:	66 0f       	add	r22, r22
  6e:	77 1f       	adc	r23, r23
  70:	8a 95       	dec	r24
  72:	e2 f7       	brpl	.-8      	; 0x6c <digitalWrite_portB+0x1e>
  74:	62 2b       	or	r22, r18
  76:	68 bb       	out	0x18, r22	; 24
  78:	08 95       	ret

0000007a <pinMode_portB>:
  7a:	96 2f       	mov	r25, r22
  7c:	67 b3       	in	r22, 0x17	; 23
  7e:	21 e0       	ldi	r18, 0x01	; 1
  80:	30 e0       	ldi	r19, 0x00	; 0
  82:	08 2e       	mov	r0, r24
  84:	02 c0       	rjmp	.+4      	; 0x8a <pinMode_portB+0x10>
  86:	22 0f       	add	r18, r18
  88:	33 1f       	adc	r19, r19
  8a:	0a 94       	dec	r0
  8c:	e2 f7       	brpl	.-8      	; 0x86 <pinMode_portB+0xc>
  8e:	20 95       	com	r18
  90:	26 23       	and	r18, r22
  92:	69 2f       	mov	r22, r25
  94:	70 e0       	ldi	r23, 0x00	; 0
  96:	02 c0       	rjmp	.+4      	; 0x9c <pinMode_portB+0x22>
  98:	66 0f       	add	r22, r22
  9a:	77 1f       	adc	r23, r23
  9c:	8a 95       	dec	r24
  9e:	e2 f7       	brpl	.-8      	; 0x98 <pinMode_portB+0x1e>
  a0:	62 2b       	or	r22, r18
  a2:	67 bb       	out	0x17, r22	; 23
  a4:	08 95       	ret

000000a6 <delay_counters>:
  a6:	ab 01       	movw	r20, r22
  a8:	bc 01       	movw	r22, r24
  aa:	41 15       	cp	r20, r1
  ac:	51 05       	cpc	r21, r1
  ae:	61 05       	cpc	r22, r1
  b0:	71 05       	cpc	r23, r1
  b2:	61 f0       	breq	.+24     	; 0xcc <delay_counters+0x26>
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	dc 01       	movw	r26, r24
  ba:	00 00       	nop
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	a1 1d       	adc	r26, r1
  c0:	b1 1d       	adc	r27, r1
  c2:	48 17       	cp	r20, r24
  c4:	59 07       	cpc	r21, r25
  c6:	6a 07       	cpc	r22, r26
  c8:	7b 07       	cpc	r23, r27
  ca:	b9 f7       	brne	.-18     	; 0xba <delay_counters+0x14>
  cc:	08 95       	ret

000000ce <Seral_open>:
  ce:	10 bc       	out	0x20, r1	; 32
  d0:	89 b9       	out	0x09, r24	; 9
  d2:	88 e1       	ldi	r24, 0x18	; 24
  d4:	8a b9       	out	0x0a, r24	; 10
  d6:	8e e8       	ldi	r24, 0x8E	; 142
  d8:	80 bd       	out	0x20, r24	; 32
  da:	08 95       	ret

000000dc <Seral_write>:
  dc:	5d 9b       	sbis	0x0b, 5	; 11
  de:	fe cf       	rjmp	.-4      	; 0xdc <Seral_write>
  e0:	8c b9       	out	0x0c, r24	; 12
  e2:	08 95       	ret

000000e4 <main>:
int8_t _i2caddr = 0x19;//0x19;
int8_t who_I_am = 0xAA;

int main(void)
{
    pinMode_portB(0, OUTPUT);		// PB0 на выход
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	c8 df       	rcall	.-112    	; 0x7a <pinMode_portB>
	pinMode_portB(1, OUTPUT);		// PB1 на выход
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	c5 df       	rcall	.-118    	; 0x7a <pinMode_portB>
	digitalWrite_portB(1, HIGH);	// PB1 в высокий уровень/ RS485 на выход
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	ac df       	rcall	.-168    	; 0x4e <digitalWrite_portB>
	
	Seral_open(103);
  f6:	87 e6       	ldi	r24, 0x67	; 103
  f8:	ea df       	rcall	.-44     	; 0xce <Seral_open>
	
	digitalWrite_portB(0, HIGH);
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	a7 df       	rcall	.-178    	; 0x4e <digitalWrite_portB>
	
	//TWI_init_speed(250);	// 18 -> 100kHz; 250 -> 7,9 kHz
	
	Seral_write( 0xA0 );
 100:	80 ea       	ldi	r24, 0xA0	; 160
 102:	ec df       	rcall	.-40     	; 0xdc <Seral_write>
	Seral_write( 0xA1 );
 104:	81 ea       	ldi	r24, 0xA1	; 161
 106:	ea df       	rcall	.-44     	; 0xdc <Seral_write>
	Seral_write( 0xA2 );
 108:	82 ea       	ldi	r24, 0xA2	; 162
 10a:	e8 df       	rcall	.-48     	; 0xdc <Seral_write>
	Seral_write( 0xA3 );
 10c:	83 ea       	ldi	r24, 0xA3	; 163
 10e:	e6 df       	rcall	.-52     	; 0xdc <Seral_write>
 
    while (1) 
    {
		digitalWrite_portB(0, LOW);
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	9c df       	rcall	.-200    	; 0x4e <digitalWrite_portB>
		delay_counters(800000);
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	75 e3       	ldi	r23, 0x35	; 53
 11a:	8c e0       	ldi	r24, 0x0C	; 12
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	c3 df       	rcall	.-122    	; 0xa6 <delay_counters>

		digitalWrite_portB(0, HIGH);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	94 df       	rcall	.-216    	; 0x4e <digitalWrite_portB>
		delay_counters(50000);
 126:	60 e5       	ldi	r22, 0x50	; 80
 128:	73 ec       	ldi	r23, 0xC3	; 195
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	bb df       	rcall	.-138    	; 0xa6 <delay_counters>
		
		Seral_write( 0x0A );
 130:	8a e0       	ldi	r24, 0x0A	; 10
 132:	d4 df       	rcall	.-88     	; 0xdc <Seral_write>
 134:	ed cf       	rjmp	.-38     	; 0x110 <main+0x2c>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
