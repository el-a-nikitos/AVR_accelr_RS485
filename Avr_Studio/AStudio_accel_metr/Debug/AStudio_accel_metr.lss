
AStudio_accel_metr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000018c  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000946  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c3  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037e  00000000  00000000  000011c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001548  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000380  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000109  00000000  00000000  0000194c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001a55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e8       	ldi	r30, 0x8C	; 140
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 36       	cpi	r26, 0x62	; 98
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	4d d0       	rcall	.+154    	; 0xf4 <main>
  5a:	96 c0       	rjmp	.+300    	; 0x188 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <digitalWrite_portB>:
 * Author : mini
 */ 
void TWI_init_speed(uint8_t prescal)	{
	TWSR = 0;	// TWPS = 1;
	
	TWBR = prescal;
  5e:	96 2f       	mov	r25, r22
  60:	68 b3       	in	r22, 0x18	; 24
  62:	21 e0       	ldi	r18, 0x01	; 1
  64:	30 e0       	ldi	r19, 0x00	; 0
  66:	08 2e       	mov	r0, r24
  68:	02 c0       	rjmp	.+4      	; 0x6e <digitalWrite_portB+0x10>
  6a:	22 0f       	add	r18, r18
  6c:	33 1f       	adc	r19, r19
  6e:	0a 94       	dec	r0
  70:	e2 f7       	brpl	.-8      	; 0x6a <digitalWrite_portB+0xc>
  72:	20 95       	com	r18
  74:	26 23       	and	r18, r22
  76:	69 2f       	mov	r22, r25
  78:	70 e0       	ldi	r23, 0x00	; 0
  7a:	02 c0       	rjmp	.+4      	; 0x80 <digitalWrite_portB+0x22>
  7c:	66 0f       	add	r22, r22
  7e:	77 1f       	adc	r23, r23
  80:	8a 95       	dec	r24
  82:	e2 f7       	brpl	.-8      	; 0x7c <digitalWrite_portB+0x1e>
  84:	62 2b       	or	r22, r18
  86:	68 bb       	out	0x18, r22	; 24
  88:	08 95       	ret

0000008a <pinMode_portB>:
  8a:	96 2f       	mov	r25, r22
  8c:	67 b3       	in	r22, 0x17	; 23
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	08 2e       	mov	r0, r24
  94:	02 c0       	rjmp	.+4      	; 0x9a <pinMode_portB+0x10>
  96:	22 0f       	add	r18, r18
  98:	33 1f       	adc	r19, r19
  9a:	0a 94       	dec	r0
  9c:	e2 f7       	brpl	.-8      	; 0x96 <pinMode_portB+0xc>
  9e:	20 95       	com	r18
  a0:	26 23       	and	r18, r22
  a2:	69 2f       	mov	r22, r25
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	02 c0       	rjmp	.+4      	; 0xac <pinMode_portB+0x22>
  a8:	66 0f       	add	r22, r22
  aa:	77 1f       	adc	r23, r23
  ac:	8a 95       	dec	r24
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <pinMode_portB+0x1e>
  b0:	62 2b       	or	r22, r18
  b2:	67 bb       	out	0x17, r22	; 23
  b4:	08 95       	ret

000000b6 <delay_counters>:
  b6:	ab 01       	movw	r20, r22
  b8:	bc 01       	movw	r22, r24
  ba:	41 15       	cp	r20, r1
  bc:	51 05       	cpc	r21, r1
  be:	61 05       	cpc	r22, r1
  c0:	71 05       	cpc	r23, r1
  c2:	61 f0       	breq	.+24     	; 0xdc <delay_counters+0x26>
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	dc 01       	movw	r26, r24
  ca:	00 00       	nop
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	a1 1d       	adc	r26, r1
  d0:	b1 1d       	adc	r27, r1
  d2:	48 17       	cp	r20, r24
  d4:	59 07       	cpc	r21, r25
  d6:	6a 07       	cpc	r22, r26
  d8:	7b 07       	cpc	r23, r27
  da:	b9 f7       	brne	.-18     	; 0xca <delay_counters+0x14>
  dc:	08 95       	ret

000000de <Seral_open>:
  de:	10 bc       	out	0x20, r1	; 32
  e0:	89 b9       	out	0x09, r24	; 9
  e2:	88 e1       	ldi	r24, 0x18	; 24
  e4:	8a b9       	out	0x0a, r24	; 10
  e6:	8e e8       	ldi	r24, 0x8E	; 142
  e8:	80 bd       	out	0x20, r24	; 32
  ea:	08 95       	ret

000000ec <Seral_write>:
  ec:	5d 9b       	sbis	0x0b, 5	; 11
  ee:	fe cf       	rjmp	.-4      	; 0xec <Seral_write>
  f0:	8c b9       	out	0x0c, r24	; 12
  f2:	08 95       	ret

000000f4 <main>:
uint8_t test_addr, accel_adr=129;
uint8_t j = 0;

int main(void)
{
    pinMode_portB(0, OUTPUT);		// PB0 на выход
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	c8 df       	rcall	.-112    	; 0x8a <pinMode_portB>
	pinMode_portB(1, OUTPUT);		// PB1 на выход
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	c5 df       	rcall	.-118    	; 0x8a <pinMode_portB>
	digitalWrite_portB(1, HIGH);	// PB1 в высокий уровень/ RS485 на выход
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	ac df       	rcall	.-168    	; 0x5e <digitalWrite_portB>
	
	Seral_open(103);
 106:	87 e6       	ldi	r24, 0x67	; 103
 108:	ea df       	rcall	.-44     	; 0xde <Seral_open>
	
	digitalWrite_portB(0, HIGH);
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	a7 df       	rcall	.-178    	; 0x5e <digitalWrite_portB>
 *
 * Created: 03.01.2019 21:02:57
 * Author : mini
 */ 
void TWI_init_speed(uint8_t prescal)	{
	TWSR = 0;	// TWPS = 1;
 110:	11 b8       	out	0x01, r1	; 1
	
	TWBR = prescal;
 112:	82 e1       	ldi	r24, 0x12	; 18
 114:	80 b9       	out	0x00, r24	; 0
 TWI_init_speed(18);	// 18 -> 100kHz

 
    while (1) 
    {
		digitalWrite_portB(0, LOW);
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	a1 df       	rcall	.-190    	; 0x5e <digitalWrite_portB>
		delay_counters(800000);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	75 e3       	ldi	r23, 0x35	; 53
 120:	8c e0       	ldi	r24, 0x0C	; 12
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	c8 df       	rcall	.-112    	; 0xb6 <delay_counters>

		digitalWrite_portB(0, HIGH);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	99 df       	rcall	.-206    	; 0x5e <digitalWrite_portB>
		//delay_counters(50000);
		
		
		//i2c_start(_i2caddr);
		Seral_write( 0x0 );
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	de df       	rcall	.-68     	; 0xec <Seral_write>
		delay_counters(30000);
 130:	60 e3       	ldi	r22, 0x30	; 48
 132:	75 e7       	ldi	r23, 0x75	; 117
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	be df       	rcall	.-132    	; 0xb6 <delay_counters>
		
		//i2c_write(LIS3DH_REG_WHOAMI);
		Seral_write( 0x1 );
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	d7 df       	rcall	.-82     	; 0xec <Seral_write>
		delay_counters(30000);
 13e:	60 e3       	ldi	r22, 0x30	; 48
 140:	75 e7       	ldi	r23, 0x75	; 117
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	b7 df       	rcall	.-146    	; 0xb6 <delay_counters>
		
		//i2c_stop();
		Seral_write( 0x2 );
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	d0 df       	rcall	.-96     	; 0xec <Seral_write>
		delay_counters(30000);
 14c:	60 e3       	ldi	r22, 0x30	; 48
 14e:	75 e7       	ldi	r23, 0x75	; 117
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	b0 df       	rcall	.-160    	; 0xb6 <delay_counters>
		
		//i2c_start(_i2caddr);
		Seral_write( 0x3 );
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	c9 df       	rcall	.-110    	; 0xec <Seral_write>
		delay_counters(30000);
 15a:	60 e3       	ldi	r22, 0x30	; 48
 15c:	75 e7       	ldi	r23, 0x75	; 117
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	a9 df       	rcall	.-174    	; 0xb6 <delay_counters>
		
		//who_I_am = i2c_read_nack();
		Seral_write( 0x4 );
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	c2 df       	rcall	.-124    	; 0xec <Seral_write>
		delay_counters(30000);
 168:	60 e3       	ldi	r22, 0x30	; 48
 16a:	75 e7       	ldi	r23, 0x75	; 117
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	a2 df       	rcall	.-188    	; 0xb6 <delay_counters>
		
		//i2c_stop();
		Seral_write( 0x5 );
 172:	85 e0       	ldi	r24, 0x05	; 5
 174:	bb df       	rcall	.-138    	; 0xec <Seral_write>
		delay_counters(30000);
 176:	60 e3       	ldi	r22, 0x30	; 48
 178:	75 e7       	ldi	r23, 0x75	; 117
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	9b df       	rcall	.-202    	; 0xb6 <delay_counters>
		
		
		Seral_write( who_I_am );
 180:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 184:	b3 df       	rcall	.-154    	; 0xec <Seral_write>
 186:	c7 cf       	rjmp	.-114    	; 0x116 <main+0x22>

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
