
AStudio_accel_metr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000646  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000054a  00000000  00000000  000007ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021e  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000f54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000308  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000083  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001323  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	2c d0       	rcall	.+88     	; 0x8c <main>
  34:	3d c0       	rjmp	.+122    	; 0xb0 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <write_portB>:
	HIGH,
	} enumLevel;

#include <avr/io.h>

void write_portB(byte byteNumber, enumLevel Level)	{
  38:	96 2f       	mov	r25, r22
	byte byteBuferPort = PORTB;
  3a:	68 b3       	in	r22, 0x18	; 24
	byteBuferPort &= ~(HIGH<<byteNumber);
	byteBuferPort |= (Level<<byteNumber);
  3c:	21 e0       	ldi	r18, 0x01	; 1
  3e:	30 e0       	ldi	r19, 0x00	; 0
  40:	08 2e       	mov	r0, r24
  42:	02 c0       	rjmp	.+4      	; 0x48 <__SREG__+0x9>
  44:	22 0f       	add	r18, r18
  46:	33 1f       	adc	r19, r19
  48:	0a 94       	dec	r0
  4a:	e2 f7       	brpl	.-8      	; 0x44 <__SREG__+0x5>
  4c:	20 95       	com	r18
  4e:	26 23       	and	r18, r22
  50:	69 2f       	mov	r22, r25
  52:	70 e0       	ldi	r23, 0x00	; 0
  54:	02 c0       	rjmp	.+4      	; 0x5a <__SREG__+0x1b>
  56:	66 0f       	add	r22, r22
  58:	77 1f       	adc	r23, r23
  5a:	8a 95       	dec	r24
  5c:	e2 f7       	brpl	.-8      	; 0x56 <__SREG__+0x17>
  5e:	62 2b       	or	r22, r18
	PORTB = byteBuferPort;
  60:	68 bb       	out	0x18, r22	; 24
  62:	08 95       	ret

00000064 <delay_counters>:
}

void delay_counters(unsigned long long_delay){
  64:	ab 01       	movw	r20, r22
  66:	bc 01       	movw	r22, r24
	for(unsigned long i = 0;i<long_delay;i++)
  68:	41 15       	cp	r20, r1
  6a:	51 05       	cpc	r21, r1
  6c:	61 05       	cpc	r22, r1
  6e:	71 05       	cpc	r23, r1
  70:	61 f0       	breq	.+24     	; 0x8a <delay_counters+0x26>
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	dc 01       	movw	r26, r24
	{
		asm volatile("nop");
  78:	00 00       	nop
	byteBuferPort |= (Level<<byteNumber);
	PORTB = byteBuferPort;
}

void delay_counters(unsigned long long_delay){
	for(unsigned long i = 0;i<long_delay;i++)
  7a:	01 96       	adiw	r24, 0x01	; 1
  7c:	a1 1d       	adc	r26, r1
  7e:	b1 1d       	adc	r27, r1
  80:	48 17       	cp	r20, r24
  82:	59 07       	cpc	r21, r25
  84:	6a 07       	cpc	r22, r26
  86:	7b 07       	cpc	r23, r27
  88:	b9 f7       	brne	.-18     	; 0x78 <delay_counters+0x14>
  8a:	08 95       	ret

0000008c <main>:
	}
}

int main(void)
{
    DDRB |= (1<<0);	// PB0 на выход
  8c:	b8 9a       	sbi	0x17, 0	; 23
    while (1) 
    {
		//PORTB |= (1<<0);
		write_portB(0, LOW);
  8e:	60 e0       	ldi	r22, 0x00	; 0
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	d2 df       	rcall	.-92     	; 0x38 <write_portB>
		delay_counters(200000);
  94:	60 e4       	ldi	r22, 0x40	; 64
  96:	7d e0       	ldi	r23, 0x0D	; 13
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	e3 df       	rcall	.-58     	; 0x64 <delay_counters>
		//PORTB &= ~(1<<0);
		write_portB(0, HIGH);
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	ca df       	rcall	.-108    	; 0x38 <write_portB>
		delay_counters(5000);
  a4:	68 e8       	ldi	r22, 0x88	; 136
  a6:	73 e1       	ldi	r23, 0x13	; 19
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	db df       	rcall	.-74     	; 0x64 <delay_counters>
  ae:	ef cf       	rjmp	.-34     	; 0x8e <main+0x2>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
